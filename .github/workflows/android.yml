name: Android Build (Release) — ZIP (self-heal)

on:
  workflow_dispatch: {}
  push:
    tags: ['v*']

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      ZIP_NAME: DPC_Kiosk_MVP_Whitelist_UI.zip     # ← 실제 ZIP 파일명으로 교체
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) ZIP 풀고 settings.gradle 위치로 프로젝트 루트 자동탐색
      - name: Unzip project
        shell: bash
        run: |
          unzip -o "$ZIP_NAME" -d .
          ROOT=$(dirname "$(find . -maxdepth 3 -name settings.gradle -print -quit)")
          if [ -z "$ROOT" ]; then echo "settings.gradle not found"; exit 1; fi
          echo "PROJECT_ROOT=$ROOT" >> $GITHUB_ENV
          echo "Detected project root: $ROOT"
          ls -la "$ROOT"

      # 2) JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # 3) Android SDK 설치 + 라이선스 수락
      - name: Set up Android SDK
        shell: bash
        run: |
          mkdir -p "$ANDROID_SDK_ROOT"
          curl -sLo cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          unzip -q cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-35" "build-tools;35.0.0"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --licenses
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$PROJECT_ROOT/local.properties"

      # 4) Gradle 설치(시스템) — wrapper 없이도 동작
      - name: Install Gradle 8.7
        shell: bash
        run: |
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle 8.7
          gradle -v

      # 5) 자가복구: 플러그인 충돌 회피(모듈 build.gradle을 'apply plugin' 방식으로 재작성)
      - name: Self-heal Gradle scripts (safe)
        shell: bash
        working-directory: ${{ env.PROJECT_ROOT }}
        run: |
          # settings.gradle
          cat > settings.gradle <<'EOF'
          rootProject.name = "DpcKioskMvp"
          include(":app")
          EOF

          # build.gradle (root)
          cat > build.gradle <<'EOF'
          buildscript {
              repositories { 
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:8.5.0'
                  classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.24'
              }
          }
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          tasks.register('clean', Delete) { delete rootProject.buildDir }
          EOF

          # app/build.gradle (module)
          cat > app/build.gradle <<'EOF'
          apply plugin: 'com.android.application'
          apply plugin: 'kotlin-android'

          android {
              namespace 'app.dpc.kiosk'
              compileSdk 35
              defaultConfig {
                  applicationId "app.dpc.kiosk"
                  minSdk 26
                  targetSdk 35
                  versionCode 2
                  versionName "0.2.0"
              }
              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_17
                  targetCompatibility JavaVersion.VERSION_17
              }
              kotlinOptions { jvmTarget = '17' }
          }

          dependencies {
              implementation 'androidx.core:core-ktx:1.13.1'
              implementation 'androidx.appcompat:appcompat:1.7.0'
              implementation 'com.google.android.material:material:1.12.0'
              implementation 'androidx.activity:activity-ktx:1.9.2'
              implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
              implementation 'androidx.recyclerview:recyclerview:1.3.2'
          }
          EOF
      # 6) 빌드
      - name: Build Release APK
        working-directory: ${{ env.PROJECT_ROOT }}
        run: |
          gradle :app:assembleRelease \
            --no-daemon --stacktrace --warning-mode all --info

      # 7) 산출물 찾기
      - name: Locate APK
        id: apk
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash
        run: |
          FILE=$(ls app/build/outputs/apk/release/*-release*.apk 2>/dev/null | head -n1 || true)
          if [ -z "$FILE" ]; then FILE=$(ls app/build/outputs/apk/release/*.apk 2>/dev/null | head -n1 || true); fi
          if [ -z "$FILE" ]; then echo "No APK found"; exit 1; fi
          echo "file=$FILE" >> "$GITHUB_OUTPUT"
          echo "APK: $FILE"

      # 8) SHA256(Base64) 생성 (QR용)
      - name: Compute SHA256 (Base64)
        id: sha
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash
        run: |
          SHA=$(sha256sum "${{ steps.apk.outputs.file }}" | awk '{print $1}')
          B64=$(python3 -c "import sys,base64,binascii; print(base64.b64encode(binascii.unhexlify(sys.argv[1])).decode(), end='')" "$SHA")
          printf "%s" "$B64" > apk.sha256.b64
          echo "sha256_b64=$B64" >> "$GITHUB_OUTPUT"
          echo "SHA256(Base64): $B64"

      # 9) 아티팩트 업로드
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: |
            ${{ env.PROJECT_ROOT }}/${{ steps.apk.outputs.file }}
            ${{ env.PROJECT_ROOT }}/apk.sha256.b64

      # 10) 태그로 푸시되었다면 릴리스 생성
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.PROJECT_ROOT }}/${{ steps.apk.outputs.file }}
            ${{ env.PROJECT_ROOT }}/apk.sha256.b64

