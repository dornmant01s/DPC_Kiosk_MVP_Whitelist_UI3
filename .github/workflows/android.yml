name: Android Build (Release) — ZIP (self-heal)

on:
  workflow_dispatch: {}
  push:
    tags: ['v*']

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      ZIP_NAME: DPC_Kiosk_MVP_Whitelist_UI.zip    # ← 실제 ZIP 이름으로 교체
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Unzip project
        run: |
          unzip -o "$ZIP_NAME" -d .
          # 프로젝트 루트 자동 탐색: settings.gradle 이 있는 폴더
          ROOT=$(dirname "$(find . -maxdepth 3 -name settings.gradle -print -quit)")
          if [ -z "$ROOT" ]; then echo "settings.gradle not found"; exit 1; fi
          echo "PROJECT_ROOT=$ROOT" >> $GITHUB_ENV
          echo "Detected project root: $ROOT"
          ls -la "$ROOT"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK
        run: |
          mkdir -p "$ANDROID_SDK_ROOT"
          curl -sLo cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          unzip -q cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "platform-tools" "platforms;android-35" || true
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "build-tools;35.0.0" || \
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" "build-tools;34.0.0"
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$PROJECT_ROOT/local.properties"

      - name: Install Gradle 8.7
        run: |
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle 8.7
          gradle -v

      - name: Build Release APK
        working-directory: ${{ env.PROJECT_ROOT }}
        run: gradle assembleRelease --no-daemon --stacktrace

      - name: Locate APK
        id: apk
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash
        run: |
          FILE=$(ls app/build/outputs/apk/release/*-release*.apk 2>/dev/null | head -n1 || true)
          if [ -z "$FILE" ]; then FILE=$(ls app/build/outputs/apk/release/*.apk 2>/dev/null | head -n1 || true); fi
          if [ -z "$FILE" ]; then echo "No APK found"; exit 1; fi
          echo "file=$FILE" >> "$GITHUB_OUTPUT"
          echo "APK: $FILE"

      - name: Compute SHA256 (Base64)
        id: sha
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash
        run: |
          SHA=$(sha256sum "${{ steps.apk.outputs.file }}" | awk '{print $1}')
          B64=$(python3 - <<PY
import sys, binascii, base64
print(base64.b64encode(binascii.unhexlify(sys.argv[1])).decode(), end="")
PY
"$SHA")
          printf "%s" "$B64" > apk.sha256.b64
          echo "sha256_b64=$B64" >> "$GITHUB_OUTPUT"
          echo "SHA256(Base64): $B64"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: |
            ${{ env.PROJECT_ROOT }}/${{ steps.apk.outputs.file }}
            ${{ env.PROJECT_ROOT }}/apk.sha256.b64

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.PROJECT_ROOT }}/${{ steps.apk.outputs.file }}
            ${{ env.PROJECT_ROOT }}/apk.sha256.b64
