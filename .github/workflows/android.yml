name: Android Build (Release) — ZIP (self-heal)

on:
  workflow_dispatch: {}
  push:
    tags: ['v*']

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      ZIP_NAME: DPC_Kiosk_MVP_Whitelist_UI.zip     # ← 실제 ZIP 파일명으로 교체
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # 1) ZIP 풀고 settings.gradle 위치로 프로젝트 루트 자동탐색
      - name: Unzip project
        shell: bash
        run: |
          unzip -o "$ZIP_NAME" -d .
          ROOT=$(dirname "$(find . -maxdepth 3 -name settings.gradle -print -quit)")
          if [ -z "$ROOT" ]; then echo "settings.gradle not found"; exit 1; fi
          echo "PROJECT_ROOT=$ROOT" >> $GITHUB_ENV
          echo "Detected project root: $ROOT"
          ls -la "$ROOT"

      # 2) JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # 3) Android SDK 설치 + 라이선스 수락
      - name: Set up Android SDK (no broken pipe)
        shell: bash
        run: |
          set -e
          mkdir -p "$ANDROID_SDK_ROOT"
          curl -sLo /tmp/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          unzip -q /tmp/cmdline-tools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"

          # 필요한 패키지 설치 (파이프 종료로 인한 오류는 무시)
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" \
            --install "platform-tools" "platforms;android-35" "build-tools;35.0.0" || true

          # 라이선스 일괄 수락 (출력은 버퍼 줄이기 위해 버림, 파이프 종료 무시)
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" --licenses > /dev/null || true

          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$PROJECT_ROOT/local.properties"

      # 4) Gradle 설치(시스템) — wrapper 없이도 동작
      - name: Install Gradle 8.7
        shell: bash
        run: |
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle 8.7
          gradle -v

      # 5) 자가복구: 플러그인 충돌 회피(모듈 build.gradle을 'apply plugin' 방식으로 재작성)
      - name: Self-heal Gradle scripts (wrapper + safe)
        shell: bash
        working-directory: ${{ env.PROJECT_ROOT }}
        run: |
          # settings.gradle
          cat > settings.gradle <<'EOF'
          rootProject.name = "DpcKioskMvp"
          include(":app")
          EOF

          # root build.gradle (legacy apply 방식 + 레포지토리 확실히)
          cat > build.gradle <<'EOF'
          buildscript {
              repositories { 
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:8.5.0'
                  classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.9.24'
              }
          }
          allprojects {
              repositories { 
                  google()
                  mavenCentral()
              }
          }
          tasks.register('clean', Delete) { delete rootProject.buildDir }
          EOF

          # app/build.gradle (Kotlin 플러그인 명시, 의존성 최소)
          cat > app/build.gradle <<'EOF'
          apply plugin: 'com.android.application'
          apply plugin: 'kotlin-android'

          android {
              namespace 'app.dpc.kiosk'
              compileSdk 35
              defaultConfig {
                  applicationId "app.dpc.kiosk"
                  minSdk 26
                  targetSdk 35
                  versionCode 2
                  versionName "0.2.0"
              }
              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_17
                  targetCompatibility JavaVersion.VERSION_17
              }
              kotlinOptions { jvmTarget = '17' }
          }

          dependencies {
              implementation 'androidx.core:core-ktx:1.13.1'
              implementation 'androidx.appcompat:appcompat:1.7.0'
              implementation 'com.google.android.material:material:1.12.0'
              implementation 'androidx.activity:activity-ktx:1.9.2'
              implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
              implementation 'androidx.recyclerview:recyclerview:1.3.2'
          }
          EOF

          # gradle.properties (안정 옵션)
          cat > gradle.properties <<'EOF'
          org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.nonTransitiveRClass=true
          EOF

          # Gradle Wrapper 생성(8.7) → 래퍼로만 빌드
          curl -s "https://get.sdkman.io" | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle 8.7 >/dev/null
          gradle wrapper --gradle-version 8.7 --distribution-type bin
          chmod +x ./gradlew
      - name: Patch sources (safe Kotlin)
        shell: bash
        working-directory: ${{ env.PROJECT_ROOT }}
        run: |
          mkdir -p app/src/main/java/app/dpc/kiosk/util
          mkdir -p app/src/main/java/app/dpc/kiosk/ui

          # Prefs.kt — 확장함수/복잡 로직 제거, 표준 joinToString만 사용
          cat > app/src/main/java/app/dpc/kiosk/util/Prefs.kt <<'EOF'
          package app.dpc.kiosk.util

          import android.content.Context

          object Prefs {
              private const val FILE = "kiosk_prefs"
              private const val KEY_DOMAINS = "domains"
              private const val KEY_PACKAGES = "packages"
              private const val KEY_PIN = "pin"

              fun getDomains(ctx: Context): List<String> =
                  ctx.getSharedPreferences(FILE, Context.MODE_PRIVATE)
                      .getString(KEY_DOMAINS, "google.com")!!
                      .split(",")
                      .map { it.trim() }
                      .filter { it.isNotEmpty() }

              fun setDomains(ctx: Context, list: List<String>) {
                  val joined = list.map { it.trim() }.filter { it.isNotEmpty() }.joinToString(",")
                  ctx.getSharedPreferences(FILE, Context.MODE_PRIVATE)
                      .edit().putString(KEY_DOMAINS, joined).apply()
              }

              fun getPackages(ctx: Context): List<String> =
                  ctx.getSharedPreferences(FILE, Context.MODE_PRIVATE)
                      .getString(KEY_PACKAGES, "com.android.chrome")!!
                      .split("\n")
                      .map { it.trim() }
                      .filter { it.isNotEmpty() }

              fun setPackages(ctx: Context, list: List<String>) {
                  val joined = list.map { it.trim() }.filter { it.isNotEmpty() }.joinToString("\n")
                  ctx.getSharedPreferences(FILE, Context.MODE_PRIVATE)
                      .edit().putString(KEY_PACKAGES, joined).apply()
              }

              fun getPin(ctx: Context): String =
                  ctx.getSharedPreferences(FILE, Context.MODE_PRIVATE)
                      .getString(KEY_PIN, "1234")!!

              fun setPin(ctx: Context, pin: String) {
                  ctx.getSharedPreferences(FILE, Context.MODE_PRIVATE)
                      .edit().putString(KEY_PIN, pin).apply()
              }
          }
          EOF

          # LauncherActivity.kt — 심플 리스트/실행만
          cat > app/src/main/java/app/dpc/kiosk/ui/LauncherActivity.kt <<'EOF'
          package app.dpc.kiosk.ui

          import android.content.Intent
          import android.content.pm.PackageManager
          import android.os.Bundle
          import android.view.LayoutInflater
          import android.view.View
          import android.view.ViewGroup
          import android.widget.Button
          import android.widget.TextView
          import androidx.activity.ComponentActivity
          import androidx.recyclerview.widget.LinearLayoutManager
          import androidx.recyclerview.widget.RecyclerView
          import app.dpc.kiosk.R
          import app.dpc.kiosk.util.Prefs

          class LauncherActivity : ComponentActivity() {
              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  setContentView(R.layout.activity_launcher)

                  val rv = findViewById<RecyclerView>(R.id.appList)
                  rv.layoutManager = LinearLayoutManager(this)

                  val pkgs = Prefs.getPackages(this)
                  val entries = pkgs.mapNotNull { pkg ->
                      try {
                          val ai = packageManager.getApplicationInfo(pkg, 0)
                          val label = packageManager.getApplicationLabel(ai).toString()
                          AppEntry(label, pkg)
                      } catch (_: PackageManager.NameNotFoundException) {
                          null
                      }
                  }
                  rv.adapter = AppAdapter(entries) { pkg ->
                      packageManager.getLaunchIntentForPackage(pkg)?.let { startActivity(it) }
                  }

                  findViewById<Button>(R.id.btnOpenWeb).setOnClickListener {
                      startActivity(Intent(this, KioskWebActivity::class.java))
                  }
                  findViewById<Button>(R.id.btnAdmin).setOnClickListener {
                      startActivity(Intent(this, AdminPinActivity::class.java))
                  }
              }
          }

          data class AppEntry(val label: String, val pkg: String)

          class AppAdapter(
              private val items: List<AppEntry>,
              private val onClick: (String) -> Unit
          ) : RecyclerView.Adapter<AppVH>() {
              override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): AppVH {
                  val v = LayoutInflater.from(parent.context)
                      .inflate(android.R.layout.simple_list_item_2, parent, false)
                  return AppVH(v)
              }
              override fun getItemCount() = items.size
              override fun onBindViewHolder(holder: AppVH, position: Int) {
                  val it = items[position]
                  holder.t1.text = it.label
                  holder.t2.text = it.pkg
                  holder.itemView.setOnClickListener { _ -> onClick(it.pkg) }
              }
          }

          class AppVH(v: View) : RecyclerView.ViewHolder(v) {
              val t1: TextView = v.findViewById(android.R.id.text1)
              val t2: TextView = v.findViewById(android.R.id.text2)
          }
          EOF

          # AdminPinActivity.kt — PIN 확인
          cat > app/src/main/java/app/dpc/kiosk/ui/AdminPinActivity.kt <<'EOF'
          package app.dpc.kiosk.ui

          import android.content.Intent
          import android.os.Bundle
          import android.widget.Button
          import android.widget.EditText
          import android.widget.Toast
          import androidx.activity.ComponentActivity
          import app.dpc.kiosk.R
          import app.dpc.kiosk.util.Prefs

          class AdminPinActivity : ComponentActivity() {
              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  setContentView(R.layout.activity_admin_pin)

                  val et = findViewById<EditText>(R.id.etPin)
                  findViewById<Button>(R.id.btnOk).setOnClickListener {
                      if (et.text.toString() == Prefs.getPin(this)) {
                          startActivity(Intent(this, SettingsActivity::class.java))
                          finish()
                      } else {
                          Toast.makeText(this, "PIN 불일치", Toast.LENGTH_SHORT).show()
                      }
                  }
              }
          }
          EOF

          # SettingsActivity.kt — 허용목록 편집
          cat > app/src/main/java/app/dpc/kiosk/ui/SettingsActivity.kt <<'EOF'
          package app.dpc.kiosk.ui

          import android.os.Bundle
          import android.widget.Button
          import android.widget.EditText
          import android.widget.Toast
          import androidx.activity.ComponentActivity
          import app.dpc.kiosk.R
          import app.dpc.kiosk.util.Prefs

          class SettingsActivity : ComponentActivity() {
              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  setContentView(R.layout.activity_settings)

                  val etDomains = findViewById<EditText>(R.id.etDomains)
                  val etPackages = findViewById<EditText>(R.id.etPackages)

                  etDomains.setText(Prefs.getDomains(this).joinToString(", "))
                  etPackages.setText(Prefs.getPackages(this).joinToString("\n"))

                  findViewById<Button>(R.id.btnSaveDomains).setOnClickListener {
                      val list = etDomains.text.toString().split(",")
                          .map { it.trim() }
                          .filter { it.isNotEmpty() }
                      Prefs.setDomains(this, list)
                      Toast.makeText(this, "도메인 저장됨", Toast.LENGTH_SHORT).show()
                  }

                  findViewById<Button>(R.id.btnSavePackages).setOnClickListener {
                      val list = etPackages.text.toString().split("\n")
                          .map { it.trim() }
                          .filter { it.isNotEmpty() }
                      Prefs.setPackages(this, list)
                      Toast.makeText(this, "앱 저장됨", Toast.LENGTH_SHORT).show()
                  }
              }
          }
          EOF

          # KioskWebActivity.kt — 호스트 매칭 간단/명확화
          cat > app/src/main/java/app/dpc/kiosk/ui/KioskWebActivity.kt <<'EOF'
          package app.dpc.kiosk.ui

          import android.os.Bundle
          import android.webkit.WebResourceRequest
          import android.webkit.WebView
          import android.webkit.WebViewClient
          import android.widget.Toast
          import androidx.activity.ComponentActivity
          import app.dpc.kiosk.R
          import app.dpc.kiosk.util.Prefs

          class KioskWebActivity : ComponentActivity() {

              override fun onCreate(savedInstanceState: Bundle?) {
                  super.onCreate(savedInstanceState)
                  setContentView(R.layout.activity_kiosk_web)

                  val allowlist = Prefs.getDomains(this)

                  val web = findViewById<WebView>(R.id.web)
                  web.settings.javaScriptEnabled = true
                  web.webViewClient = object : WebViewClient() {
                      override fun shouldOverrideUrlLoading(view: WebView?, request: WebResourceRequest?): Boolean {
                          val host = request?.url?.host ?: return true
                          val ok = allowlist.any { pattern -> matches(host, pattern) }
                          return if (ok) false else {
                              Toast.makeText(this@KioskWebActivity, "Blocked: $host", Toast.LENGTH_SHORT).show()
                              true
                          }
                      }
                  }
                  web.loadUrl("https://www.google.com/")
              }

              private fun matches(host: String, pattern: String): Boolean {
                  val p = pattern.trim()
                  if (p.isEmpty()) return false
                  return if (p.startsWith("*.")) {
                      val root = p.removePrefix("*.") // ex) example.com
                      host == root || host.endsWith(".$root")
                  } else {
                      host == p || host.endsWith(".$p")
                  }
              }
          }
          EOF
      # 6) 빌드
      - name: Build (diagnose Kotlin first)
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash
        run: |
          set -e
          # 1) Kotlin 컴파일만 먼저 돌려서 원인 노출
          ./gradlew :app:compileReleaseKotlin --no-daemon --stacktrace --warning-mode all --info \
            | tee kotlin_compile.log || true

          echo "----- FIRST 120 LINES WITH 'e: ' FROM KOTLIN COMPILER -----" | tee -a kotlin_compile_summary.txt
          grep -n "^[[:space:]]*e: " -n kotlin_compile.log | head -n 120 | tee -a kotlin_compile_summary.txt || true

          # 2) 이어서 APK 빌드 시도(리트라이 포함)
          ./gradlew :app:assembleRelease --no-daemon --stacktrace --warning-mode all --info \
            | tee gradle_build.log || \
          (echo "Retry once..." && ./gradlew :app:assembleRelease --no-daemon --stacktrace --info | tee -a gradle_build.log)

      - name: Upload build logs (for debug)
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            ${{ env.PROJECT_ROOT }}/kotlin_compile.log
            ${{ env.PROJECT_ROOT }}/kotlin_compile_summary.txt
            ${{ env.PROJECT_ROOT }}/gradle_build.log

      - name: Locate APK
        id: apk
        working-directory: ${{ env.PROJECT_ROOT }}
        shell: bash
        run: |
          FILE=$(ls app/build/outputs/apk/release/*-release*.apk 2>/dev/null | head -n1 || true)
          if [ -z "$FILE" ]; then FILE=$(ls app/build/outputs/apk/release/*.apk 2>/dev/null | head -n1 || true); fi
          if [ -z "$FILE" ]; then echo "No APK found"; exit 1; fi
          echo "file=$FILE" >> "$GITHUB_OUTPUT"
          echo "APK: $FILE"

      # 9) 아티팩트 업로드
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: |
            ${{ env.PROJECT_ROOT }}/${{ steps.apk.outputs.file }}
            ${{ env.PROJECT_ROOT }}/apk.sha256.b64

      # 10) 태그로 푸시되었다면 릴리스 생성
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.PROJECT_ROOT }}/${{ steps.apk.outputs.file }}
            ${{ env.PROJECT_ROOT }}/apk.sha256.b64

